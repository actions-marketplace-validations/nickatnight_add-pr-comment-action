#!/usr/bin/env python3

import json
import os
import sys

from github import Github
from github.PullRequest import PullRequest
from github.Repository import Repository


INPUT_BODY = os.getenv("INPUT_BODY")                            # input 'body' from action
INPUT_ALLOW_DUPLICATES = os.getenv("INPUT_ALLOW_DUPLICATES")    # input 'allow_duplicates' from action
INPUT_REPORT = os.getenv("INPUT_REPORT")                        # input 'report' from action
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")                        # pass as env var from action
GITHUB_EVENT_PATH = os.getenv("GITHUB_EVENT_PATH")              # prodvided by GitHub runner
GITHUB_EVENT_NAME = os.getenv("GITHUB_EVENT_NAME")              # prodvided by GitHub runner


class CommentPR:
    """post a comment to a github pull request
    """
    def __init__(self) -> None:
        if not GITHUB_TOKEN:
            print(f"Missing GITHUB_TOKEN")
            sys.exit(0)

        self.github = Github(GITHUB_TOKEN)
        self.event_json = None

        self._read_event_path_data()

    def _read_event_path_data(self) -> None:
        """read in json payload from event trigger
        :return:            nothing
        """
        with open(GITHUB_EVENT_PATH) as json_file:
            event_json = json.load(json_file)
        self.event_json = event_json

    def _check_duplicates(self, pr: PullRequest, body: str) -> None:
        """check if body of issue comments already exists on the PR
        :param pr:              pull request
        :param body:            comment body string
        :return:                None...exists script if duplicate comment found
        """
        comments = pr.get_issue_comments()

        for comment in comments:
            if comment.body == body:
                print("Found duplicate comment...skipping")
                sys.exit(0)

    def get_repo_object(self) -> Repository:
        """fetch Repository() object by parsing event data
        :return:            repo to act on
        """
        repo_name = self.event_json["repository"]["full_name"]
        org, repo = repo_name.split("/")
        org_object = self.github.get_organization(org)
        repo_object = org_object.get_repo(repo)
        return repo_object

    def main(self) -> None:
        """main
        """
        pull_request = None
        repo = self.get_repo_object()
        body = INPUT_BODY

        if GITHUB_EVENT_NAME == "pull_request":
            pull_request = repo.get_pull(self.event_json["number"])
        else:
            push_head = self.event_json["after"]
            for pr in repo.get_pulls():
                if push_head == pr.head.sha:
                    pull_request = pr

        if not pull_request:
            print("No PR found.")
            sys.exit(0)

        if INPUT_REPORT:
            report = INPUT_REPORT
            report = f"""
                <p>
                    <details>
                        <pre>{report}</pre>
                    </details>
                </p>
            """
            body += INPUT_REPORT

        if INPUT_ALLOW_DUPLICATES == "false":
            self._check_duplicates(pull_request, body)

        pull_request.create_issue_comment(body)


if __name__ == "__main__":
    comment_pr = CommentPR()
    comment_pr.main()
